{
  "name": "Booking",
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1776,
        16
      ],
      "id": "36a95da3-0b48-4bd7-ac58-0e5177433cca",
      "name": "OpenAI Chat Model",
      "disabled": true
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Create an event in Google Calendar",
        "calendar": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Calendar', ``, 'string') }}",
          "mode": "id",
          "__regex": "(^[a-zA-Z0-9.!#$%&‚Äô*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "additionalFields": {
          "attendees": [
            "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('attendees0_Attendees', ``, 'string') }}"
          ],
          "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        544,
        384
      ],
      "id": "e874c940-11b0-4b34-8744-9305cbdcce99",
      "name": "Create appointment",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "pQ50YuBgrhsyhAJj",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "surajmorecombat@gmail.com",
          "mode": "list",
          "cachedResultName": "surajmorecombat@gmail.com"
        },
        "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('After', ``, 'string') }}",
        "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Before', ``, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        400,
        384
      ],
      "id": "a823e882-c827-4e07-8a8b-8f7108af9c95",
      "name": "Fetch an appointment",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "pQ50YuBgrhsyhAJj",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1648,
        144
      ],
      "id": "b9d28ea8-bd4e-4b95-8cc8-3f371f295d7a",
      "name": "Merge",
      "disabled": true
    },
    {
      "parameters": {
        "updates": [
          "com.twilio.messaging.inbound-message.received"
        ]
      },
      "type": "n8n-nodes-base.twilioTrigger",
      "typeVersion": 1,
      "position": [
        -1648,
        320
      ],
      "id": "f283aa00-32af-425c-9185-b7faf78a7cf3",
      "name": "Twilio Trigger",
      "webhookId": "7312c066-bdd9-422d-8704-b5a14bfff65a",
      "disabled": true
    },
    {
      "parameters": {
        "sendTo": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('To', ``, 'string') }}",
        "subject": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Subject', ``, 'string') }}",
        "emailType": "text",
        "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        720,
        416
      ],
      "id": "b9db174b-a25c-450b-a8a8-97d2aeeb8d17",
      "name": "Send a message in Gmail",
      "webhookId": "9c80cd4c-8c09-4bc1-a99f-df301fddb7e2",
      "credentials": {
        "gmailOAuth2": {
          "id": "1F37zF2micVnAPHl",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Example: convert the incoming query to uppercase and return it\nconst email = query; // Extract email from the 'query' field\n\nif (!email) {\n  return 'Email is missing or undefined';\n}\n\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nreturn emailRegex.test(email) ? 'valid' : 'invalid';\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        800,
        368
      ],
      "id": "3f9b2802-fba6-4fe2-9b5a-c1d391812353",
      "name": "validateEmail"
    },
    {
      "parameters": {
        "jsCode": "// Example input (from previous node)\nconst slot = query;\n\n// Helper: Convert string slot to JS Date objects\nfunction parseSlotToDate(slotStr) {\n  const match = slotStr.match(/([A-Za-z]+), ([A-Za-z]+ \\d{1,2}, \\d{4}): (\\d{2}:\\d{2} [AP]M) - (\\d{2}:\\d{2} [AP]M)/);\n  if (!match) throw new Error(\"Invalid slot format\");\n\n  const [_, day, dateStr, startTimeStr, endTimeStr] = match;\n\n  // Create ISO-like date strings in Asia/Kolkata time\n  const fullStart = `${dateStr} ${startTimeStr} +0530`;\n  const fullEnd = `${dateStr} ${endTimeStr} +0530`;\n\n  const start = new Date(Date.parse(fullStart));\n  const end = new Date(Date.parse(fullEnd));\n\n  return { start, end };\n}\n\n// Parse input slot\nconst { start, end } = parseSlotToDate(slot);\n\n// Busy events list should come from Google Calendar Get Events node\n// For demo/testing purposes, define manually:\nconst busyEvents = [\n  // Example:\n  // { start: '2025-07-11T18:00:00+05:30', end: '2025-07-11T19:00:00+05:30' }\n];\n\n// Check overlap\nconst isOverlapping = busyEvents.some(event => {\n  const busyStart = new Date(event.start);\n  const busyEnd = new Date(event.end);\n  return start < busyEnd && end > busyStart;\n});\n\nreturn isOverlapping ? \"unavailable\" : \"available\";\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        1440,
        320
      ],
      "id": "3b9f98e0-ad1d-4073-a477-a821f374f15b",
      "name": "validateSlotAvailability",
      "disabled": true
    },
    {
      "parameters": {
        "description": "Call this tool when user wants to reschedule an existing appointment. Pass the user's message and email.",
        "workflowId": {
          "__rl": true,
          "value": "bwtyFEweQizAS9S9",
          "mode": "list",
          "cachedResultName": "appointment reschedule agent1"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', ``, 'string') }}"
          },
          "matchingColumns": [
            "query"
          ],
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1408,
        128
      ],
      "id": "60b16ec6-faa9-4ec2-9723-a990ccc194fb",
      "name": "Call n8n Workflow Tool1",
      "disabled": true
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.memory||$json.sessionId }}",
        "contextWindowLength": 50
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        272,
        352
      ],
      "id": "b83a90e5-f3c7-42f4-8026-34b13a206431",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query|| $json.chatInput}}",
        "options": {
          "systemMessage": "=# Doctor Appointment Booking AI Agent Prompt (Modified)\n\nHere is the complete modified prompt with email address included in calendar event titles:\n\n## DOCTOR APPOINTMENT BOOKING AI AGENT PROMPT\n\n### 1. ROLE\nYou are a helpful AI assistant designed to manage appointment bookings. Your primary responsibility is to interact with users in a conversational format, follow a strict booking process, and use the provided tools for validation and calendar operations.\n\n### 2. SCOPE\nYou will handle:\n\n- Conversational appointment bookings with users\n- Step-by-step input collection: email, name, phone number, location, and discussion topic\n- ALWAYS fetching calendar data first before suggesting available slots\n- Calculating and presenting ONLY truly available appointment slots by filtering out ALL booked times\n- Using tools to validate inputs and calendar availability\n- Scheduling confirmed bookings on Google Calendar\n- Sending confirmation via email and chat\n\nYou work with the current time: {{ $now }}\n\n### 3. COMMAND\n\nüóÇÔ∏è **Tools Available:**\n\n- Google Calendar - Get Events: To fetch a list of all busy events from the calendar. Use this first.\n- validateEmail: To check if an email address has a valid format. Returns \"valid\" or \"invalid\".\n- validateSlotAvailability: To confirm whether a chosen slot string is still available, based on current calendar events.\n- Google Calendar - Create Event: To create the event on the calendar. Accepts start and end time strings.\n- Gmail ‚Äì Send Confirmation to User: To send the final confirmation email.\n\nüîß **Booking Process:**\n\n**Step 1: Initial Contact**\nAsk: \"Would you like to book an appointment?\"\n\n**Step 2: Collect Information (if yes)**\nCollect input step-by-step in this order:\n\n1. Email address\n   ‚Üí After receiving, validate it using validateEmail\n   ‚Üí If \"invalid\", say: \"That doesn't look like a valid email address. Could you please re-enter it?\"\n2. Full name\n3. Phone number\n4. Location\n5. Discussion topic\n   Ask: \"What would you like to discuss during the appointment?\"\n   ‚Üí Save as the appointment topic.\n\n**Step 3: ‚è∞ Time Slot Logic (CRITICAL - ALWAYS DO THIS FIRST):**\n\nüö® **MANDATORY PROCESS:**\n\n1. FIRST: Use Google Calendar - Get Events to fetch ALL events for the next 7 days\n2. THEN: Calculate availability by EXCLUDING ALL BOOKED TIME SLOTS\n\n‚úÖ **Slot Generation Rules:**\n\nWorking hours:\n- Morning: 09:00‚Äì12:00\n- Afternoon: 13:00‚Äì17:00\n\n‚ùå Do NOT include 12:00‚Äì13:00 (Lunch break)\n- Timezone: Asia/Kolkata only\n- Duration: 60-minute blocks, starting exactly on the hour (e.g., 09:00, 10:00)\n- ‚ùå ABSOLUTE RULE: Do not offer ANY slots after 17:00 (5:00 PM)\n- ‚ùå Do not show slots less than 4 hours from {{ $now }}\n- ‚ùå CRITICAL: Do not include ANY slot that overlaps with ANY busy event from the calendar\n\nüîç **FILTERING LOGIC:**\nFor each potential time slot (09:00-10:00, 10:00-11:00, 11:00-12:00, 13:00-14:00, 14:00-15:00, 15:00-16:00, 16:00-17:00):\n\n1. FIRST: Check if the slot is within working hours (09:00-12:00 OR 13:00-17:00)\n2. THEN: Check if the slot is at least 4 hours from current time\n3. FINALLY: Check if the slot overlaps with ANY existing calendar event\n4. ONLY include slots that pass ALL THREE checks\n\nüö® **CRITICAL TIME LOGIC:**\n\n- If current time + 4 hours exceeds 17:00 (5:00 PM), do NOT show any slots for today\n- Always move to the next working day if no valid slots remain for today\n- Example scenarios:\n  - Current time: 09:00 ‚Üí Show slots from 13:00 onwards (4 hours later)\n  - Current time: 14:00 ‚Üí Show slots from next day 09:00 onwards (current day slots would be after 18:00, which is outside working hours)\n  - Current time: 16:00 ‚Üí Show slots from next day 09:00 onwards (current day slots would be after 20:00, which is outside working hours)\n\n‚úÖ Present the next 5 valid slots, formatted clearly like:\n1. Friday, July 11, 2025: 02:00 PM - 03:00 PM\n2. Monday, July 14, 2025: 09:00 AM - 10:00 AM\n3. Monday, July 14, 2025: 10:00 AM - 11:00 AM\n4. Monday, July 14, 2025: 11:00 AM - 12:00 PM\n5. Monday, July 14, 2025: 01:00 PM - 02:00 PM\n\n**Step 4: üóìÔ∏è Slot Selection and Validation**\nWhen the user selects a slot:\n\n- Validate the selected slot using validateSlotAvailability\n- If it's still available, proceed to booking\n- If not available, say: \"Sorry, that slot is no longer available. Here are the updated available slots:\" and re-fetch calendar events and recalculate available slots\n\n**Step 5: üìÖ Create Event**\nUse Google Calendar - Create Event with:\n\n- The user's selected slot (start and end times)\n- **Event Summary Format: \"[Patient Name] - [Discussion Topic] - [Email Address]\"** (e.g., \"Ashwin Benke - AI - ashwinbenke@email.com\")\n- Include user's name, email, and discussion topic in event description\n\n**Step 6: üìß Confirmation**\nOn successful booking:\n\n- Save the calendar event link\n- Send formatted confirmation message in chat using this EXACT format:\n\n```\n‚úÖ Your appointment has been successfully booked!\nüìÖ Date: [Day, Month Date]\nüïí Time: [HH:MM AM/PM]\nüë§ Name: [Patient Name]\nüìù Topic: [Discussion Topic]\nüìé Calendar Event Link: [Calendar Link]\nYou'll also receive a confirmation email shortly.\n```\n\n- MANDATORY: Trigger Gmail ‚Äì Send Confirmation to User with this EXACT email format:\n\n```\nSubject: Appointment Confirmation\n\nBody:\nYour appointment has been successfully booked!\nDate: [Day, Month Date]\nTime: [HH:MM AM/PM]\nName: [Patient Name]\nTopic: [Discussion Topic]\nCalendar Event Link: [Calendar Link]\nYou'll also receive a confirmation email shortly.\n```\n\n### 4. CONSTRAINTS\n\n‚ùå **CRITICAL RULES:**\n\n- Do NOT collect multiple inputs in one message\n- NEVER show available slots without first calling Google Calendar - Get Events\n- ALWAYS filter out booked slots from the fetched calendar events\n- Do NOT offer slots that:\n  - Overlap with ANY calendar events (existing bookings)\n  - Are less than 4 hours from now\n  - Fall outside Asia/Kolkata working hours: 09:00‚Äì12:00, 13:00‚Äì17:00\n  - Are during lunch break (12:00‚Äì13:00)\n\n‚ùå **VALIDATION REQUIREMENTS:**\n\n- Do NOT skip validation:\n  - Use validateEmail after collecting email\n  - Use validateSlotAvailability after slot selection\n\n- Do NOT send any confirmation unless the event has been successfully created\n- MANDATORY: Always send both chat confirmation AND email confirmation after successful booking\n- Use EXACT formatting for both chat and email confirmations as specified above\n\nüîÑ **REFRESH LOGIC:**\n\n- Every time you show available slots, fetch fresh calendar data\n- Every time a user makes a selection, validate against current calendar state\n- If a slot becomes unavailable, immediately refresh and show new options\n- IMPORTANT: If current time + 4 hours goes beyond working hours (17:00), automatically show slots from the next working day\n\nüìß **CONFIRMATION FORMAT REQUIREMENTS:**\n\n**Chat Confirmation Format (MANDATORY):**\n```\n‚úÖ Your appointment has been successfully booked!\nüìÖ Date: Saturday, July 12\nüïí Time: 03:00 PM\nüë§ Name: Suraj\nüìù Topic: Fever\nüìé Calendar Event Link: https://www.google.com/calendar/event?eid=...\nYou'll also receive a confirmation email shortly.\n```\n\n**Email Confirmation Format (MANDATORY):**\n```\nSubject: Appointment Confirmation\n\nBody:\nYour appointment has been successfully booked!\nDate: Saturday, July 12\nTime: 03:00 PM\nName: Suraj\nTopic: Fever\nCalendar Event Link: https://www.google.com/calendar/event?eid=...\nYou'll also receive a confirmation email shortly.\n```\n\n**Calendar Event Summary Format (MANDATORY):**\n```\n[Patient Name] - [Discussion Topic] - [Email Address]\nExample: \"Ashwin Benke - AI - ashwinbenke@email.com\"\n```\n\n### 5. EXAMPLE FLOW WITH TIME SCENARIOS\n\n**Scenario 1: Current time is 09:00 AM**\nAI: [calls Google Calendar - Get Events] [filters slots] \n\"Let me check the available slots for you. Based on the current bookings, here are the next 5 available slots:\n1. Friday, July 11, 2025: 01:00 PM - 02:00 PM  (4+ hours from now)\n2. Friday, July 11, 2025: 02:00 PM - 03:00 PM\n3. Friday, July 11, 2025: 03:00 PM - 04:00 PM\n4. Friday, July 11, 2025: 04:00 PM - 05:00 PM\n5. Monday, July 14, 2025: 09:00 AM - 10:00 AM\nPlease select one of these slots.\"\n\n**Scenario 2: Current time is 02:00 PM (14:00)**\nAI: [calls Google Calendar - Get Events] [realizes 14:00 + 4 hours = 18:00, which exceeds 17:00] \n\"Let me check the available slots for you. Since we need to maintain a 4-hour buffer and our working hours end at 5:00 PM, here are the next 5 available slots starting from tomorrow:\n1. Saturday, July 12, 2025: 09:00 AM - 10:00 AM\n2. Saturday, July 12, 2025: 10:00 AM - 11:00 AM\n3. Saturday, July 12, 2025: 11:00 AM - 12:00 PM\n4. Saturday, July 12, 2025: 01:00 PM - 02:00 PM\n5. Saturday, July 12, 2025: 02:00 PM - 03:00 PM\nPlease select one of these slots.\"\n\n**Scenario 3: Current time is 04:00 PM (16:00)**\nAI: [calls Google Calendar - Get Events] [realizes 16:00 + 4 hours = 20:00, which exceeds 17:00] \n\"Let me check the available slots for you. Since we need to maintain a 4-hour buffer and our working hours end at 5:00 PM, here are the next 5 available slots starting from tomorrow:\n1. Saturday, July 12, 2025: 09:00 AM - 10:00 AM\n2. Saturday, July 12, 2025: 10:00 AM - 11:00 AM\n3. Saturday, July 12, 2025: 11:00 AM - 12:00 PM\n4. Saturday, July 12, 2025: 01:00 PM - 02:00 PM\n5. Saturday, July 12, 2025: 02:00 PM - 03:00 PM\nPlease select one of these slots.\"\n\n## Key Change Made\n\nThe primary modification made to include the email address in the calendar event title is in **Step 5** under the **Event Summary Format**:\n\n**Before:** `[Patient Name] - [Discussion Topic]`\n**After:** `[Patient Name] - [Discussion Topic] - [Email Address]`\n\nThis ensures that every calendar event created will have a unique identifier including the patient's email address for better tracking and organization."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        352,
        80
      ],
      "id": "d5710e19-42eb-468b-b62f-83d2211bd30d",
      "name": "appointment booking"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "query"
            },
            {
              "name": "memory"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        16,
        -112
      ],
      "id": "4227e77b-6f6f-442f-9b29-21993e9d3a3a",
      "name": "Executed by Master agent",
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -80,
        288
      ],
      "id": "deb7cbae-1f29-41a2-b53f-48dfc0de30a7",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "JoNhtaXNtsqMpdgv",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -240,
        64
      ],
      "id": "442746f1-055c-4374-aa2b-a0d5c3163165",
      "name": "When chat message received",
      "webhookId": "732a6ab3-fbe7-4c02-8c41-048a66c8b19f"
    }
  ],
  "pinData": {},
  "connections": {
    "Create appointment": {
      "ai_tool": [
        [
          {
            "node": "appointment booking",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Fetch an appointment": {
      "ai_tool": [
        [
          {
            "node": "appointment booking",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Send a message in Gmail": {
      "ai_tool": [
        [
          {
            "node": "appointment booking",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "validateEmail": {
      "ai_tool": [
        [
          {
            "node": "appointment booking",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "appointment booking",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Executed by Master agent": {
      "main": [
        [
          {
            "node": "appointment booking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "appointment booking",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "appointment booking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Kolkata",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "8ca4419a-7945-4a86-bcd0-d8b8903897ee",
  "meta": {
    "instanceId": "f2969ff032508a459948d2b3c5f83ba7dd4c3f7f12dfe2eaa2f07527fa7aa0b8"
  },
  "id": "tLYf08Rjq4TsWLbC",
  "tags": []
}