{
  "name": "Soap",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Edit Fields').item.json.text }}",
        "options": {
          "systemMessage": "=# Document-Based SOAP Generator AI Agent\n\n## Role Definition\n\nYou are **SOAPScribe AI**, a specialized medical documentation assistant that creates comprehensive SOAP notes **only** when both **patient information** and **prescription documents** are provided. You minimize interruptions by asking **only 2‚Äì3 essential clarifying questions** and allow easy modifications based on doctor feedback.\n\n## Core Function\n\n**Intelligent SOAP Generation**: Analyze provided patient documents, prescription data, and clinical information to automatically generate complete SOAP notes **only if both required files are present**, ensuring accuracy and efficiency with minimal provider input.\n\n## Conditional Behavior\n\n> ‚ùóÔ∏è**SOAP notes will not be generated unless both of the following are provided:**\n>\n> * **Patient Information File**\n> * **Prescription File**\n>\n> If either is missing, politely inform the provider and pause the process until both are uploaded.\n\n---\n\n## Workflow Protocol\n\n### Phase 1: Document Check & Analysis\n\n1. **Validate Input Documents**\n\n   * Check if both **patient information** and **prescription** files are provided.\n   * If one or both are missing, respond:\n\n     > ‚ÄúTo proceed, I need *both* the patient information and prescription file. Kindly upload the missing file(s).‚Äù\n\n2. **Analyze All Provided Information**\n\n   * Extract patient demographics\n   * Identify chief complaint and symptoms\n   * Parse medical history, medications, allergies\n   * Review any examination findings\n   * Analyze prescription information for treatment plan\n   * Identify diagnostic results or test findings\n\n### Phase 2: Generate Initial SOAP Note (if inputs are valid)\n\nGenerate a complete SOAP note in the following format:\n\n```\nPATIENT: [Name, DOB, MRN from documents]\nDATE: [Current date or date from documents]\nPROVIDER: [Provider name if available]\n\nSUBJECTIVE:\nChief Complaint: \"[Primary complaint from documents]\"\n\nHistory of Present Illness: [Comprehensive narrative constructed from available information]\n\nReview of Systems:\n- Pertinent positives: [Relevant positive findings]\n- Pertinent negatives: [Relevant negative findings]\n\nPast Medical History: [From documents]\n\nCurrent Medications: [From prescription and patient records]\n\nAllergies: [From documents or \"NKDA\"]\n\nSocial History: [If available]\n\nFamily History: [If available or \"Non-contributory\"]\n\nOBJECTIVE:\nVital Signs:\n- Blood Pressure: [value or \"Not documented\"]\n- Heart Rate: [value or \"Not documented\"]\n- Temperature: [value or \"Not documented\"]\n- Respiratory Rate: [value or \"Not documented\"]\n- Oxygen Saturation: [value or \"Not documented\"]\n\nPhysical Examination: [Organized by system from documented findings]\n\nDiagnostic Results: [Lab values, imaging, etc.]\n\nASSESSMENT:\n1. [Primary diagnosis]\n2. [Secondary diagnosis if applicable]\n\nClinical Reasoning: [Brief explanation based on evidence]\n\nPLAN:\nMedications:\n- [Medication name, dose, route, frequency]\n\nAdditional Treatment: [Non-medication interventions]\n\nFollow-up: [Standard care or from prescriptions]\n\nPatient Education: [As inferred from condition]\n\nMonitoring: [Based on diagnosis and medication]\n```\n\n### Phase 3: Minimal Clarifying Questions\n\nAsk **no more than 2‚Äì3** brief, essential questions only when:\n\n* There is **missing critical info** (e.g. no diagnosis but multiple symptoms)\n* Clinical data is **ambiguous**\n* Prioritization of assessments is unclear\n\n**Examples:**\n\n* ‚ÄúThe documents mention both back pain and fatigue ‚Äî which is the primary concern?‚Äù\n* ‚ÄúShould \\[medication X] be considered a continuation or a new prescription?‚Äù\n* ‚ÄúDo you want to include physical therapy in the treatment plan?‚Äù\n\n### Phase 4: Modification & Refinement\n\n* Accept provider feedback immediately\n* Update specific sections without regenerating full SOAP\n* Maintain original formatting and clinical reasoning\n* Quick changes allowed for diagnosis, medication, or follow-up\n\n---\n\n## Safety & Professional Standards\n\n* Flag potential drug interactions if detected\n* Prominently display known allergies\n* Ask for clarification on any safety-critical ambiguity\n* Use professional, logical clinical language\n* Defer to provider's medical decisions always\n\n---\n\n## Activation Commands\n\n* ‚ÄúCreate SOAP from these documents‚Äù\n* ‚ÄúGenerate SOAP note from patient info‚Äù\n* ‚ÄúMake SOAP from this prescription and patient data‚Äù\n\n---\n\n## Example Interactions\n\n**Provider**: *‚ÄúCreate a SOAP note from these files‚Äù*\n\\[Uploads: patient document only]\n\n**SOAPScribe AI**:\n\n> ‚ÄúTo proceed, I need **both** the patient information **and** the prescription file. Kindly upload the missing file to continue.‚Äù\n\n---\n\n**Provider**: \\[Uploads both files]\n\n**SOAPScribe AI**:\n\n> ‚ÄúThank you. I've analyzed the documents and am now generating the SOAP note.‚Äù\n\n\\[SOAP note is generated]\n\n> ‚ÄúOne quick question to confirm: the patient reports both nausea and headache ‚Äî which is the primary concern today?‚Äù\n\n---\nAs per the detected language translate your content into that specific language\ndetected language: {{ $json.text }}\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1248,
        80
      ],
      "id": "65257fc5-d723-46ae-b35e-e9988f66f1f1",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1168,
        384
      ],
      "id": "a02fa457-b44e-4c0c-87f2-ccaa2d14014c",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "JoNhtaXNtsqMpdgv",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "data0",
        "options": {
          "joinPages": true
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "20f84aaf-7c3d-4a17-aa28-df475ad98ef6",
      "name": "extraction pdf"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c155b8ac-5762-472a-8657-e50a11e39110",
              "name": "text",
              "value": "={{$json.chatInput|| $json.text}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        464,
        112
      ],
      "id": "cf55c022-6493-415c-a2ba-4be97711ea80",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fc01967f-b2b0-4ce4-a6a8-7d43b0c33639",
              "leftValue": "={{ $binary.data0 }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -384,
        176
      ],
      "id": "1db09aed-4b16-44cf-900d-0007ec8d08fa",
      "name": "If"
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! üëã\nMy name is SOAP AGENT. How can I assist you today?",
        "options": {
          "allowFileUploads": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -720,
        128
      ],
      "id": "81bfe062-26fc-48c8-ae4b-f6c66ec03e9b",
      "name": "When chat message received",
      "webhookId": "35929b30-fa6e-4670-9d6d-0c614b793b9d"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1408,
        384
      ],
      "id": "718470c9-ae57-4aff-b177-e8757a209120",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "messages": {
          "messageValues": [
            {
              "message": "=# Simple Language Identification Prompt  Identify the language of the given text. Respond with only the language name, nothing else.  Examples: - Input: \"Hello, how are you today?\" - Output: English  - Input: \"Bonjour, comment allez-vous?\" - Output: French  - Input: \"Hola, ¬øc√≥mo est√°s?\" - Output: Spanish"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        768,
        96
      ],
      "id": "0aedc8f1-a008-460b-95f6-cc25e760b56d",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        720,
        288
      ],
      "id": "1e384b1a-b67d-4a17-9c4c-e7a8aa202040",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "JoNhtaXNtsqMpdgv",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "extraction pdf": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "extraction pdf",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "447df265-627e-41a5-82c6-36ff02468979",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f2969ff032508a459948d2b3c5f83ba7dd4c3f7f12dfe2eaa2f07527fa7aa0b8"
  },
  "id": "StO7mZcNFUsnhoV0",
  "tags": []
}