{
  "name": "patient intake",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "messages"
        ],
        "options": {}
      },
      "id": "897213e9-4bb3-4811-a66a-0ffe359c8c1b",
      "name": "WhatsApp Trigger",
      "type": "n8n-nodes-base.whatsAppTrigger",
      "position": [
        -1904,
        592
      ],
      "webhookId": "0b1b3a9b-2f6a-4f5a-8385-6365d96f4802",
      "typeVersion": 1,
      "credentials": {
        "whatsAppTriggerApi": {
          "id": "25JD1aTdJS8Y1Ejd",
          "name": "Suraj"
        }
      }
    },
    {
      "parameters": {
        "resource": "media",
        "operation": "mediaUrlGet",
        "mediaGetId": "={{ $json.audio.id }}"
      },
      "id": "6b30efc6-cd11-420a-8115-c879ec1160fd",
      "name": "Get Audio URL",
      "type": "n8n-nodes-base.whatsApp",
      "position": [
        -1104,
        128
      ],
      "typeVersion": 1,
      "webhookId": "22f7ac57-decf-46f7-af7d-eebb6b4782f0",
      "credentials": {
        "whatsAppApi": {
          "id": "ZrlWhery0a9U2IJT",
          "name": "Suraj"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "whatsAppApi",
        "options": {}
      },
      "id": "fc8edd46-299a-4810-9948-a27cadb41e07",
      "name": "Download Audio",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -944,
        128
      ],
      "typeVersion": 4.2,
      "credentials": {
        "whatsAppApi": {
          "id": "ZrlWhery0a9U2IJT",
          "name": "Suraj"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d990cbd6-a408-4ec4-a889-41be698918d9",
              "name": "message_type",
              "type": "string",
              "value": "={{ $('Split Out Message Parts').item.json.type }}"
            },
            {
              "id": "23b785c3-f38e-4706-80b7-51f333bba3bd",
              "name": "message_text",
              "type": "string",
              "value": "={{ $json.text.body || $json.text || '' }}"
            },
            {
              "id": "6e83f9a7-cf75-4182-b2d2-3151e8af76b9",
              "name": "from",
              "type": "string",
              "value": "={{ $('WhatsApp Trigger').item.json.messages[0].from }}"
            },
            {
              "id": "da4b602a-28ca-4b0d-a747-c3d3698c3731",
              "name": "message_caption",
              "type": "string",
              "value": "={{ $('Redirect Message Types').item.json.video && $('Redirect Message Types').item.json.video.caption || '' }}\n{{ $('Redirect Message Types').item.json.image && $('Redirect Message Types').item.json.image.caption || ''}}\n{{ $('Redirect Message Types').item.json.audio && $('Redirect Message Types').item.json.audio.caption || ''}}"
            }
          ]
        },
        "options": {}
      },
      "id": "28d24b08-2b44-45c8-8d65-cb7886694848",
      "name": "Get User's Message",
      "type": "n8n-nodes-base.set",
      "position": [
        -32,
        672
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "fieldToSplitOut": "messages",
        "options": {}
      },
      "id": "4938ee62-3951-4ac7-a017-c844d44209b4",
      "name": "Split Out Message Parts",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        -1664,
        592
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.type == 'audio' && Boolean($json.audio) }}",
                    "rightValue": "audio"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Audio Message"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "Text Message"
        }
      },
      "id": "742f3d6b-54eb-404d-944d-cf4148c8a5f8",
      "name": "Redirect Message Types",
      "type": "n8n-nodes-base.switch",
      "position": [
        -1392,
        672
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "content": "## 1. WhatsApp Trigger\n[Learn more about the WhatsApp Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.whatsapptrigger)\n\nTo start receiving WhatsApp messages in your workflow, there are quite a few steps involved so be sure to follow the n8n documentation. When we recieve WhatsApp messages, we'll split out the messages part of the payload and handle them depending on the message type using the Switch node.",
        "height": 245.72612197928734,
        "width": 335.8011507479863,
        "color": 7
      },
      "id": "38773dea-87bb-4296-bfc6-38507b0ceeda",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1904,
        304
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### 2. Transcribe Audio Messages ðŸ’¬\nFor audio messages or voice notes, we can use GPT4o to transcribe the message for our AI Agent.",
        "height": 97.23360184119679,
        "width": 356.65822784810103,
        "color": 7
      },
      "id": "257e27a2-5f89-4397-9bad-e3ecb27f0ad8",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1104,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### 3. Describe Video Messages ðŸŽ¬\nFor video messages, one approach is to use a Multimodal Model that supports parsing video. Currently, Google Gemini is a well-tested service for this task. We'll need to use the HTTP request node as currrently n8n's LLM node doesn't currently support video binary types.",
        "height": 127.13555811277331,
        "width": 492.5258918296896,
        "color": 7
      },
      "id": "e87e72ed-01cf-47d8-9962-2fd7a6418103",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1104,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### 5. Text summarizer ðŸ“˜\nFor text messages, we don't need to do much transformation but it's nice to summarize for easier understanding.",
        "height": 97.23360184119679,
        "width": 428.24395857307246,
        "color": 7
      },
      "id": "55e268d4-68ce-4bab-b53b-c4e37faf2fb7",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1104,
        800
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "amount": 0
      },
      "id": "52f47c1b-82f8-47eb-ba11-f3edb60fb487",
      "name": "Get Text",
      "type": "n8n-nodes-base.wait",
      "position": [
        -1024,
        656
      ],
      "webhookId": "99b49c83-d956-46d2-b8d3-d65622121ad9",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "content": "## 6. Generate Response with AI Agent\n[Read more about the AI Agent node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)\n\nNow that we'll able to handle all message types from WhatsApp, we could do pretty much anything we want with it by giving it our AI agent. Examples could include handling customer support, helping to book appointments or verifying documents.\n\nIn this demonstration, we'll just create a simple AI Agent which responds to our WhatsApp user's message and returns a simple response.",
        "height": 273.14522439585744,
        "width": 500.7797468354428,
        "color": 7
      },
      "id": "e8f31247-81c1-49b0-a9df-93fd9a6ad3be",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        32,
        304
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 7. Respond to WhatsApp User\n[Read more about the Whatsapp node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.whatsapp/)\n\nTo close out this demonstration, we'll simple send a simple text message back to the user. Note that this WhatsApp node also allows you to send images, audio, videos, documents as well as location!",
        "height": 211.45776754890682,
        "width": 384.12151898734186,
        "color": 7
      },
      "id": "5ebb84d7-2f50-452d-bb03-e38e4a6956db",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        624,
        944
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "={{ $('WhatsApp Trigger').item.json.metadata.phone_number_id }}",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').item.json.messages[0].from }}",
        "textBody": "={{ $json.output }}",
        "additionalFields": {}
      },
      "id": "7bea7659-daf3-452f-9f02-fa6170c11c62",
      "name": "Respond to User",
      "type": "n8n-nodes-base.whatsApp",
      "position": [
        624,
        688
      ],
      "typeVersion": 1,
      "webhookId": "7488997c-735f-4bfb-b36c-3b156f0bdab6",
      "credentials": {
        "whatsAppApi": {
          "id": "ZrlWhery0a9U2IJT",
          "name": "Suraj"
        }
      }
    },
    {
      "parameters": {
        "content": "## Try It Out!\n\n### This n8n template demonstrates the beginnings of building your own n8n-powered WhatsApp chatbot! Under the hood, utilise n8n's powerful AI features to handle different message types and use an AI agent to respond to the user. A powerful tool for any use-case!\n\n* Incoming WhatsApp Trigger provides a way to get messages into the workflow.\n* The message received is extracted and sent through 1 of 4 branches for processing.\n* Each processing branch uses AI to analyse, summarize or transcribe the message so that the AI agent can understand it.\n* The AI Agent is used to generate a response generally and uses a wikipedia tool for more complex queries.\n* Finally, the response message is sent back to the WhatsApp user using the WhatsApp node.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!",
        "height": 562.8608514850005,
        "width": 470.66513233601853
      },
      "id": "12db73c4-cc7c-4463-b883-51427152b2f3",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2464,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### Activate workflow to use!\nYou must activate the workflow to use this WhatsApp Chabot. If you are self-hosting, ensure WhatsApp is able to connect to your server.",
        "height": 96.0144533433243,
        "width": 473.28063885246377,
        "color": 5
      },
      "id": "03d68537-06e1-467b-b3cf-c3ced61abbdf",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2464,
        720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "7033d285-f636-494c-83f4-edb53465ce50",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        112,
        848
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "s0KLMfyo2TK6GhlQ",
          "name": "J"
        }
      }
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n### ðŸš¨ Google Gemini Required!\nNot using Gemini? Feel free to swap this out for any Multimodal Model that supports Audio.",
        "height": 294.22048331415436,
        "width": 260
      },
      "id": "830730a8-e219-446e-996d-a4aa844ded64",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -576,
        96
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  contents: [\n    {\n      parts: [\n        { text: \"Transcribe this audio\" },\n        {\n          inlineData: {\n            mimeType: $json.mimeType || \"audio/ogg\",\n            data: $json.data \n          }\n        }\n      ]\n    }\n  ]\n}) }}\n",
        "options": {}
      },
      "id": "1e6eab2b-fb49-4009-a835-abcb7527bd85",
      "name": "Google Gemini Audio",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -496,
        112
      ],
      "typeVersion": 4.2,
      "credentials": {
        "googlePalmApi": {
          "id": "s0KLMfyo2TK6GhlQ",
          "name": "J"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2ec0e573-373b-4692-bfae-86b6d3b9aa9a",
              "name": "text",
              "type": "string",
              "value": "={{ $json.candidates[0].content.parts[0].text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "9e85383b-8d5a-4c0e-81bb-d806677703da",
      "name": "Format Response1",
      "type": "n8n-nodes-base.set",
      "position": [
        -256,
        112
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=WhatsApp AI Patient Intake Assistant Prompt (v4 - Complete)\nYour Role: You are a friendly and efficient AI Patient Intake Assistant for a medical clinic, operating on WhatsApp. Your primary goal is to collect patient information accurately and securely, providing a smooth, error-free experience.\nif the user provides any other information or the information that you are going to as in next question don't ask the questions again or repeat the same questions from the patient.\nand also in starting conversations ask all the required informations at once\nimportant thing ask all the required information in the message so the user could give it all\nCore Persona:\n\nFriendly & Empathetic: Use a warm and reassuring tone.\n\nProfessional & Clear: Be precise and easy to understand.\n\nConcise: Keep messages short and simple.\n\nOnboarding Process Flow\nYou will guide the patient through the 7-step process below. Ask for one piece of information at a time.\n\n- important introduce your self first in the starting\n\nIntroduction: Introduce yourself and your purpose.\n\nPersonal Information: Collect Full Name, Date of Birth, Gender, Phone Number, Email, and Residential Address and also Blood Group.\nNote - validate each with respective term.\n\nMedical History: Collect Chronic Illnesses, Past Surgeries, Allergies, and Current Medications.\nNote - validate each with respective term.\n\nCurrent Condition: Collect Main Symptoms, Duration, and Pain Level (1-10).\nNote - validate each with respective term.\n\nInsurance Details: Collect Provider, Policy Number, and Validity Date.\nNote - validate each with respective term.\n\nEmergency Contact: Collect Name, Phone Number, and Relationship.\nNote - validate each with respective term.\n\nConsent & Final Summary: Request consent, get a digital signature, and present the complete, formatted summary for final verification.\n\nCore Logic and Error Handling (CRITICAL INSTRUCTIONS)\nThis is the most important part of your instructions. Follow this logic for every piece of information you collect.\n\n1. The \"Ask-Validate-Proceed\" Cycle:\n\nASK: Ask one clear question.\n\nVALIDATE: When the user replies, check their answer against the rules below.\n\nIf the answer is VALID: Acknowledge it briefly (e.g., \"Got it.\", \"Thank you.\") and immediately PROCEED to the next question.\n\nIf the answer is INVALID: Politely state the specific problem, provide a clear example of a correct answer, and ask the exact same question again.\n\n2. Handling Corrections (Anti-Loop Rule):\n\nYou must not get stuck in an error loop. After you have identified an error and asked the user to correct it, you must evaluate their new response from a fresh perspective. If the user's new response is valid, you must accept it and move on. Do not repeat the error message if the new input is correct.\n\nSpecific Validation Rules\nA. Date of Birth Validation:\n\nQuestion: \"What is your date of birth? Please use the DD/MM/YYYY format.\"\n\nValidation Checks:\n\nFormat: The input must be in the DD/MM/YYYY format.\nIMPORTANT:if the user doesn't Give proper Format make the formate of the date as per our requirement\nDate Validity: The date must be a real, valid date.\n\nFuture Check: The date cannot be in the future (The current date is July 18, 2025).\n\nExample Failure/Correction Flow:\n\nUser: 24/03/2096\n\nYou (Detects future date): \"I'm sorry, that date is in the future. Please enter your date of birth as DD/MM/YYYY, for example, 24/03/2004.\"\n\nUser: 24/03/2004\n\nYou (Validates new input is correct): \"Thank you. Now, what is your gender?\"\n\nB. Phone Number Validation:\n\nQuestion: \"What is your phone number? Please include the country code (e.g., +919876543210).\"\n\nValidation Check: Must start with a + and be followed by 10-13 digits.\n\nFinal Summary Formatting Requirement\nAfter the user gives their consent and digital signature, you must present a final summary for verification. You will format this summary exactly as shown below, including all collected information.\n\nExample of the Final Summary Message:\n\n\"Thank you, your intake form is almost complete.\n\nPlease review a summary of all the information you have provided. It is important that this is 100% accurate.\n\n--- PATIENT INTAKE SUMMARY ---\n\nPersonal Information\n\nFull Name: John Vijay Doe\n\nDate of Birth: 24/03/2004\n\nGender: Male\n\nPhone Number: +919876543210\n\nEmail: john.doe@email.com\n\nAddress: 123 Health St, Wellness Colony, Pimpri-Chinchwad, 411019\n\nBlood Group: A+\n\n--- Medical History ---\n\nChronic Illnesses: None\n\nPast Surgeries: Appendix removal (2015)\n\nAllergies: Penicillin\n\nCurrent Medications: None\n\n--- Current Condition ---\n\nSymptoms: Fever and sore throat\n\nDuration: 3 days\n\nPain Level: 4/10\n\n--- Insurance Details ---\n\nProvider: Star Health\n\nPolicy Number: XZ987654321\n\nValidity: 31/12/2025\n\n--- Emergency Contact ---\n\nName: Jane Doe\n\nPhone: +919123456789\n\nRelationship: Sister\n\n--- Consent ---\n\nTerms Agreement: Yes\n\nDigital Signature: John Vijay Doe\n\nIs all of the information above correct? Please reply with 'Yes' to confirm, or tell me which part needs to be changed.\"\n\nMessage - ```{{ $json.message_text }}```\n{{ $json.message_caption ? `message caption: ${$json.message_caption.trim()}` : '' }}\nmessage type:{{ $json.message_type }}",
        "options": {}
      },
      "id": "9d5b9aa1-e7b4-4e39-83bf-2170ab70210d",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        176,
        480
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "if (!item.binary || !item.binary.data || !item.binary.data.data) {\n  throw new Error('Binary data is missing.');\n}\n\nconst binaryData = item.binary.data.data;\nconst mimeType = item.binary.data.mimeType || 'audio/ogg';\n\n// Decode and re-encode base64\nconst audioBase64 = Buffer.from(binaryData, 'base64').toString('base64');\n\n// Attach to item.json\nitem.json.audioBase64 = audioBase64;\nitem.json.mimeType = mimeType;\n\nreturn item;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -736,
        128
      ],
      "id": "4eba2482-17c3-44c5-9fa0-f3a0d794a05d",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -688,
        -48
      ],
      "id": "3a47601f-f812-4ff2-b932-68ba23cf24af",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.from }}",
        "contextWindowLength": 50
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        320,
        960
      ],
      "id": "c316f69b-f497-410a-b319-a618a7c4e40a",
      "name": "Simple Memory"
    }
  ],
  "pinData": {},
  "connections": {
    "WhatsApp Trigger": {
      "main": [
        [
          {
            "node": "Split Out Message Parts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Audio URL": {
      "main": [
        [
          {
            "node": "Download Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Audio": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User's Message": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out Message Parts": {
      "main": [
        [
          {
            "node": "Redirect Message Types",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redirect Message Types": {
      "main": [
        [
          {
            "node": "Get Audio URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Text": {
      "main": [
        [
          {
            "node": "Get User's Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Audio": {
      "main": [
        [
          {
            "node": "Format Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response1": {
      "main": [
        [
          {
            "node": "Get User's Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Google Gemini Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "96ec07f6-7e1c-4b6a-806b-b561bca57625",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f2969ff032508a459948d2b3c5f83ba7dd4c3f7f12dfe2eaa2f07527fa7aa0b8"
  },
  "id": "ohRtPa5qfWAUyL53",
  "tags": []
}